There's no way to join the same table twice and use the same alias.  Consider this desired document with 'stage' repeated twice:

assignment: {
  assignmentID: 1
  item: {
    itemID: 1,
    stage: {
      stageID: 1,
      name: 'Review
    }
  },
  stage: {
    stageID: 1,
    name: 'Review'
  }
}

Here the user is assigned to an item and needs to perform an action when the stage is reached, and the item is in a stage.  A good test case for the above may be a pictures table, where a staff member can have a picture, and so can the shop.  Consider:

1) Can't have the same alias for two tables.
2) Can have the same mapTo twice, but not under the same parent.
3) The parent must refer to the alias, not the mapping, otherwise if the same mapping appears twice a parent name could be ambiguous.
4) It would be nice to have a short-hand method for joins: innerJoin('users u');

Need to add foreign keys to the tables, and keep a lookup in the database.  Then, by default, joins can use the key to automatically join.  It should work both ways--references and referenced--but be careful of ambiguity.  That is, one table could reference another twice: picture.largeThumb references pictures.pictureID, picture.smallThumb references picture.pictureID.

On insert, children get the new ID from parents.  Foreign keys should be used instead as it's better than name matching.  Also, foreign keys could be used to dictate insertion order (e.g. parent first or child first depends on which way the key goes).

Provide a short-hand end() method on the DataContext and update all the examples/doc.
Make the code work with node-mssql (probably need to fix parameters).
Composite keys are not supported by the Schema and will not work.  Needs impl.
When there are two top-level schemata two DataMappers are used.  This doubles the time because two loops are needed.  Performance would be better if the DataMapper could take an array of schemata and perform the mapping in a single loop.  On the other hand, two top-level schemata is a corner case.
It would be nice to allow multiple queries to be combinded into a single one.  With big queries, the cartisian product can be huge and it would be a performance enhancer to allow selecting from multiple related entities.
